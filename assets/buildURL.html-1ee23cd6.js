import{_ as e,W as c,X as l,$ as u,Y as n,a0 as t,a1 as p,Z as s,a2 as o,C as i}from"./framework-90c572f7.js";const r={},k=o('<h2 id="buildurl" tabindex="-1"><a class="header-anchor" href="#buildurl" aria-hidden="true">#</a> buildURL</h2><blockquote><p>构建<code>url</code></p></blockquote><table><thead><tr><th>参数名</th><th>参数类型</th><th>参数说明</th></tr></thead><tbody><tr><td><code>url</code></td><td><code>string</code></td><td><code>url</code>地址</td></tr><tr><td><code>params</code></td><td><code>any</code></td><td><code>url</code>参数</td></tr><tr><td><code>paramsSerializer</code></td><td><code>(params: any) =&gt; string</code></td><td>自定义参数序列化</td></tr></tbody></table><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3>',4),d=n("strong",null,"依赖函数",-1),m=n("br",null,null,-1),v=n("code",null,"typeOf",-1),b=n("code",null,"isURLSearchParams",-1),h=n("code",null,"URLSearchParams",-1),y=n("code",null,"encodeURIC",-1),f=n("strong",null,[n("code",null,"encodeURIComponent")],-1),g=o(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">buildURL</span><span class="token punctuation">(</span>
	url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
	params<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
	paramsSerializer<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>params<span class="token punctuation">)</span> <span class="token keyword">return</span> url<span class="token punctuation">;</span>
	<span class="token keyword">let</span> serializerParams<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>paramsSerializer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		serializerParams <span class="token operator">=</span> <span class="token function">paramsSerializer</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isURLSearchParams</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		serializerParams <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> parts<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> paramsVal <span class="token operator">=</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>paramsVal <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> paramsVal <span class="token operator">===</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">typeOf</span><span class="token punctuation">(</span>paramsVal<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;array&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				values <span class="token operator">=</span> paramsVal<span class="token punctuation">;</span>
				key <span class="token operator">+=</span> <span class="token string">&quot;[]&quot;</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				values <span class="token operator">=</span> <span class="token punctuation">[</span>paramsVal<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			values<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">typeOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;date&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					val <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">typeOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					val <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				parts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIC</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIC</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		serializerParams <span class="token operator">=</span> parts<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>serializerParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> markIndex <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>markIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> markIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		url <span class="token operator">+=</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;?&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&quot;?&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> serializerParams<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> url<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 传入 url 和 对象参数</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;https://127.0.0.1/search&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>
	userName<span class="token operator">:</span> <span class="token string">&quot;botaoxy&quot;</span><span class="token punctuation">,</span>
	password<span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">buildURL</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https://127.0.0.1/search?userName=botaoxy&amp;password=123456</span>

<span class="token comment">// 传入的 URLSearchParams 类型的参数</span>
<span class="token keyword">const</span> paramsString <span class="token operator">=</span> <span class="token string">&quot;userName=botaoxy&amp;password=123456&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> searchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>paramsString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">buildURL</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> searchParams<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https://127.0.0.1/search?userName=botaoxy&amp;password=123456</span>

<span class="token comment">// url已携带部分参数来做组合</span>
<span class="token keyword">const</span> url1 <span class="token operator">=</span> <span class="token string">&quot;https://127.0.0.1/search?userName=botaoxy&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> params1 <span class="token operator">=</span> <span class="token punctuation">{</span>
	password<span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">buildURL</span><span class="token punctuation">(</span>url1<span class="token punctuation">,</span> params1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https://127.0.0.1/search?userName=botaoxy&amp;password=123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function w(q,_){const a=i("RouterLink");return c(),l("div",null,[u(`
 * @description:
 * @Author: ChengBotao
 * @Date: 2023-03-04 11:24:39
`),k,n("blockquote",null,[n("p",null,[d,m,t(a,{to:"/language/typescript/utils/typeOf.html"},{default:p(()=>[v]),_:1}),s(" > "),t(a,{to:"/language/typescript/utils/isxxx.html"},{default:p(()=>[b,s(" - 判断是否是 **"),h,s("**类型")]),_:1}),s(" > "),t(a,{to:"/language/typescript/utils/encodeURIC.html"},{default:p(()=>[y,s(" - "),f,s(" 针对一些特殊字符编码处理")]),_:1})])]),g])}const R=e(r,[["render",w],["__file","buildURL.html.vue"]]);export{R as default};
