import{_ as l,p as i,q as o,a1 as e}from"./framework-5866ffd3.js";const t={},u=e('<h2 id="计算机组成篇" tabindex="-1"><a class="header-anchor" href="#计算机组成篇" aria-hidden="true">#</a> 计算机组成篇</h2><ol><li>进制运算的基本知识</li></ol><ul><li>进制运算的基础 <ul><li>进制概述 | 定义: 是一种计数方式,亦称进位计数法或位值计数法,有限种数字符号来表示无限的数值,使用的数字符号的数目称为这种进位制的计数或底数 | 常见的进制: 十进制 八进制(0o) 十六进制(0x) 二十进制 六十进制 二进制(0b)</li><li>二进制运算的基础 <ul><li>二进制转化十进制的方法 | 按权展开法</li><li>十进制转化二进制(针对整数): 重复相除法</li><li>十进制转化二进制(针对小数): 重复相乘法</li></ul></li></ul></li></ul><ol start="2"><li>二进制数据的表示方法</li></ol><ul><li>有符号数与无符号数 <blockquote><p>十进制数 +表示正数 -表示负数<br> 二进制数 0表示正数 1表示负数</p></blockquote><ul><li>原码表示法 | 原码表示运算非常复杂 特别是两个操作数符号不同的时候 <ul><li>使用0表示正数 1表示负数</li><li>规定符号位位于数值第一位(左边的第一位)</li></ul></li></ul></li><li>二进制的补码表示法</li><li>二进制的反码表示法 <ul><li>负数的反码等于原码除符号位外按位取反 | 负数的补码等于反码+1</li></ul></li><li>小数的二进制补码表示法</li></ul><ol start="3"><li>二进制数据的运算</li></ol><ul><li>定点数与浮点数 <ul><li>定点数表示法</li><li>浮点数表示法 | 单精度浮点数:使用4字节 32位来表达浮点数(float)、双精度浮点数:使用8字节 64位来表达浮点数(double)</li><li>定点数与浮点数的对比</li></ul></li><li>定点数的加减法运算</li><li>浮点数的加减法运算</li><li>浮点数的乘除运算</li></ul>',7),r=[u];function a(c,s){return i(),o("div",null,r)}const _=l(t,[["render",a],["__file","processor.html.vue"]]);export{_ as default};
