import{_ as n,p as s,q as a,Q as t,a1 as e}from"./framework-204010b2.js";const o={},p=e(`<h2 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeOf</h2><blockquote><p><strong>说明:</strong> <em>返回一个<strong>对象或原始值</strong>表达式的类型</em><br><strong>返回:</strong> <em><code>{ string }</code></em> 类型</p></blockquote><table><thead><tr><th>参数名</th><th>参数类型</th><th>参数说明</th></tr></thead><tbody><tr><td><code>operand</code></td><td><code>any</code></td><td>一个对象或原始值表达式</td></tr></tbody></table><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// npm install billows</span>
<span class="token comment">// import { typeOf } from &#39;billows&#39;;</span>

<span class="token function">typeOf</span><span class="token punctuation">(</span><span class="token string">&quot;chengbotao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;string&quot;</span>
<span class="token function">typeOf</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;number&quot;</span>
<span class="token function">typeOf</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;number&quot;</span>
<span class="token function">typeOf</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;string&quot;</span>
<span class="token function">typeOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;date&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">typeOf</span><span class="token punctuation">(</span>operand<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> toString <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>
  <span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>operand<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  type <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> type<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> type<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>JavaScript <code>typeof</code> 操作符可能返回值</em></p><table><thead><tr><th>类型</th><th>返回值</th></tr></thead><tbody><tr><td><code>Undefined</code></td><td><code>undefined</code></td></tr><tr><td><code>Boolean</code></td><td><code>boolean</code></td></tr><tr><td><code>Number</code></td><td><code>number</code></td></tr><tr><td><code>BigInt</code></td><td><code>bigInt</code></td></tr><tr><td><code>String</code></td><td><code>string</code></td></tr><tr><td><code>Symbol</code></td><td><code>symbol</code></td></tr><tr><td><code>Function</code></td><td><code>function</code></td></tr><tr><td><code>Null</code></td><td><code>object</code></td></tr><tr><td><strong>其他对象</strong></td><td><code>object</code></td></tr></tbody></table><blockquote><p>操作符 <code>typeof</code> 看着只能将**<em>原始值</em>(除 Null)**的类型返回,其他的数据类型都是<code>object</code></p></blockquote><h2 id="解析" tabindex="-1"><a class="header-anchor" href="#解析" aria-hidden="true">#</a> 解析</h2><blockquote><p>借助<code>Object.prototype.toString.call(target)</code>来检测类型<br> 返回<code>[object type]</code>,其中 <code>type</code> 是对象的类型<br><code>type</code> 类型包含了更多的内置对象(<code>Date</code>,<code>Math</code>,<code>Promise</code>等),细化了<code>object</code></p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// toString.call(Math); =&gt; [object Math]</span>
<span class="token keyword">const</span> toString <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>

<span class="token comment">// split 字符串分割成数组</span>
<span class="token comment">// toString.call(Math).split(&quot; &quot;)[1]; =&gt; [&quot;[object&quot;, &quot;Math]&quot;] =&gt; &quot;Math]&quot;</span>
<span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>operand<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// substring 字符串截取</span>
<span class="token comment">// &quot;Math]&quot;.substring(1, &quot;Math]&quot;.length-1); =&gt; &quot;Math&quot;</span>
<span class="token comment">// toLowerCase 字符串转为小写形式</span>
<span class="token comment">// &quot;Math&quot;.toLowerCase(); =&gt; &quot;math&quot;</span>
type <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> type<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function c(u,l){return s(),a("div",null,[t(`
 * @Author: Chengbotao
 * @Date: 2022-06-15 14:26:45
`),p])}const d=n(o,[["render",c],["__file","typeOf.html.vue"]]);export{d as default};
